[
    {
        "code_index": 1,
        "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        freq = defaultdict(int)\n        for num in a:\n            freq[num] += 1\n        counts = list(freq.values())\n        unique_counts = set(counts)\n        print(sum(unique_counts))\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "3\n6\n6\n11",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "3\n13\n11\n1\n15",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n3\n3\n1\n3",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "3\n6\n3\n6",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n14\n8\n4\n4\n14\n10",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "3\n11\n10\n3\n3",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "6\n3\n3\n6\n4",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "3\n15\n7\n2\n10\n14",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "1\n6\n4\n1\n6",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "5\n6\n5\n8",
                "error": null
            }
        ]
    },
    {
        "code_index": 2,
        "code": "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        count = {}\n        for num in a:\n            count[num] = count.get(num, 0) + 1\n        sorted_counts = sorted(count.values(), reverse=True)\n        m = len(sorted_counts)\n        prefix = [0] * (m + 1)\n        for i in range(1, m + 1):\n            prefix[i] = prefix[i-1] + sorted_counts[i-1]\n        max_sum = 0\n        for k in range(1, m + 1):\n            required = k * (k + 1) // 2\n            if prefix[k] >= required:\n                if prefix[k] > max_sum:\n                    max_sum = prefix[k]\n        print(max_sum)\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "3\n7\n10\n13",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "4\n14\n11\n1\n15",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n6\n3\n1\n3",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "4\n7\n3\n7",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "4\n14\n11\n4\n12\n15\n10",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "3\n11\n11\n6\n4",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "7\n6\n4\n11\n4",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "3\n15\n7\n4\n10\n14",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "1\n6\n4\n1\n10",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "7\n10\n10\n13",
                "error": null
            }
        ]
    },
    {
        "code_index": 3,
        "code": "import sys\n\ndef main():\n    input = sys.stdin.read().split()\n    ptr = 0\n    q = int(input[ptr])\n    ptr += 1\n    for _ in range(q):\n        n = int(input[ptr])\n        ptr += 1\n        a = list(map(int, input[ptr:ptr+n]))\n        ptr += n\n        print(len(set(a)))\n\nif __name__ == '__main__':\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "4\n10\n5\n6",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "5\n3\n2\n7\n1",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n4\n2\n2\n4",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "5\n8\n5\n7",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n4\n4\n4\n1\n2\n2",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "2\n7\n8\n12\n6",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "7\n7\n5\n7\n7",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "4\n3\n3\n2\n3\n2",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "4\n11\n5\n7\n4",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "3\n8\n4\n6",
                "error": null
            }
        ]
    },
    {
        "code_index": 4,
        "code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    q = int(data[idx])\n    idx += 1\n    for _ in range(q):\n        n = int(data[idx])\n        idx += 1\n        a = list(map(int, data[idx:idx + n]))\n        idx += n\n        # Compute the maximum size of the gift\n        # We need to find the maximum number of distinct a_i's such that each type is used at most once\n        # So, the maximum possible is the minimum between the number of distinct types and the maximum frequency of any type\n        # Wait, no, that's not correct. Let me think again.\n        # For example, if we have counts like {1:5, 2:3, 3:2}, then the maximum possible is min(3,5) =3, but wait, no.\n        # Because we can take 1, 2, 3. So that's 3, which is min(3,5). But in this case, the maximum frequency is 5, but the number of types is 3. So the minimum is correct.\n\n        # Another example: counts {1:2, 2:2, 3:2, 4:2}. The maximum possible is 4, which is the number of types, since each can be taken once.\n\n        # So the maximum size is the minimum between the number of distinct types and the maximum count among the counts.\n\n        # So the approach is:\n        # 1. Count the frequency of each type.\n        # 2. Find the number of distinct types, say m.\n        # 3. Find the maximum frequency, say max_freq.\n        # 4. The answer is the minimum of m and max_freq.\n\n        # Wait, but wait. Let's think of another example:\n        # Suppose counts are {1:3, 2:3, 3:3}. Then the maximum is 3, which is the min(3,3)=3. So yes.\n\n        # Another example: counts {1:1, 2:2, 3:3, 4:4}. The number of distinct types is 4, max_freq is 4. So the answer is 4.\n\n        # But what if counts are {1:5, 2:5, 3:5, 4:5}. Then m=4, max_freq=5. So the answer is 4.\n\n        # So the approach seems correct.\n\n        # So the steps are:\n        # For each query:\n        # - count the frequency of each type in a.\n        # - compute m = number of distinct types.\n        # - compute max_freq = maximum frequency.\n        # - answer is min(m, max_freq).\n\n        # So the code can be written as:\n\n        from collections import Counter\n        cnt = Counter(a)\n        m = len(cnt)\n        max_freq = max(cnt.values())\n        print(min(m, max_freq))\n\nif __name__ == '__main__':\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "2\n3\n3\n4",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "2\n3\n2\n1\n1",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "2\n2\n2\n1\n2",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "2\n3\n2\n3",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n4\n4\n4\n1\n1\n1",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "2\n4\n3\n4\n2",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "3\n2\n2\n3\n3",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "2\n3\n3\n2\n3\n2",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "1\n3\n3\n1\n4",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "3\n3\n3\n4",
                "error": null
            }
        ]
    },
    {
        "code_index": 5,
        "code": "import sys\nimport math\nfrom collections import defaultdict\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        count = defaultdict(int)\n        for num in a:\n            count[num] += 1\n        # Now, count is a dictionary where keys are candy types, values are their counts.\n        # We need to select a subset of these counts such that all selected counts are distinct.\n        # The goal is to maximize the sum of the selected counts.\n\n        # To maximize the sum, we need to take as many as possible, but with all counts distinct.\n        # So, we can sort the counts in descending order, and then select the largest possible subset.\n\n        # Let's collect all the counts and sort them.\n        counts = sorted(count.values(), reverse=True)\n        m = len(counts)\n        # Now, we need to find the maximum number of elements we can take such that no two are the same.\n        # So, it's similar to finding the largest subset with all elements unique.\n\n        # We can model this as a problem where for each count, we can take at most 1. So, the maximum sum is the sum of the first k elements where k is the maximum possible without duplicates.\n\n        # Wait, but that's not correct. Because for example, if counts are [3,3,3], then the maximum sum is 3, by taking one of them.\n\n        # So, the problem reduces to selecting a subset where each element is unique, and the sum is maximized.\n\n        # How to compute this?\n\n        # Let's think about the frequencies of the counts.\n\n        # For each possible count value, say 'c', we can take at most one of them.\n\n        # So, the maximum sum is the sum of the counts, but with each count used at most once.\n\n        # Wait, that's not correct. Because the counts themselves may have duplicates. So, for example, if counts are [5,5,5], then we can take only one 5, so sum is 5.\n\n        # So, the approach is to count how many times each count occurs, and for each count 'c', we can take min(freq_c, 1) * c.\n\n        # But this is not entirely correct. Because if there are multiple counts with the same value, you can only take one of them.\n\n        # So, the maximum sum is the sum of all unique counts, but considering that for each unique count, you can take at most one instance.\n\n        # Wait, no. Because for example, if counts are [3,3,2,2,1], then the maximum sum is 3 + 2 + 1 = 6. Because you can take one 3, one 2, and one 1.\n\n        # So, the approach is to collect all the counts, and then for each unique count, take it once, but only if the count's frequency is at least 1.\n\n        # But wait, the counts themselves may have duplicates. So, the sum is the sum of all unique counts, but each count is taken only once, regardless of how many times it appears.\n\n        # So, the maximum sum is the sum of the unique counts.\n\n        # But wait, that can't be right. Because suppose counts are [3,3,3], then the maximum sum is 3.\n\n        # So, in that case, the sum is 3, which is the sum of the unique counts (only one unique count, which is 3).\n\n        # So, the correct approach is to take all the unique counts, sum them, and that's the maximum possible.\n\n        # Wait, but that's not correct. Because the counts are the frequencies of each candy type. For example, if a candy type has 3 candies, but you can only take one of them in the gift.\n\n        # So, the sum is the sum of the counts, but each count is considered only once, regardless of how many times it appears.\n\n        # So, the maximum sum is the sum of the unique counts, but each count is taken once.\n\n        # So, in code, we can create a set of the counts, and sum them.\n\n        # Let's test this approach with some examples.\n\n        # Example 1:\n\n        # counts = [3,3,3]\n        # unique_counts = {3}\n        # sum = 3\n\n        # Example 2:\n\n        # counts = [3,3,2,2,1]\n        # unique_counts = {3,2,1}\n        # sum = 6\n\n        # Example 3:\n\n        # counts = [1,1,1,1]\n        # unique_counts = {1}\n        # sum = 1\n\n        # Example 4:\n\n        # counts = [5,4,3,2,1]\n        # unique_counts = {5,4,3,2,1}\n        # sum = 15\n\n        # So, this approach seems to work.\n\n        # So, the code would be:\n\n        # Create a set of the counts, sum them.\n\n        # But wait, what if counts are [2,2,2,2,2]?\n\n        # unique_counts = {2}, sum is 2.\n\n        # Which is correct.\n\n        # So, the maximum sum is the sum of the unique counts.\n\n        # So, in the code, we can compute the sum as sum(set(counts)).\n\n        # Wait, but what about when counts are [4,4,4,4,4,4,4,4,4,4]?\n\n        # Then, the sum is 4.\n\n        # Which is correct.\n\n        # So, the code is as follows.\n\n        # Compute the sum of the unique counts.\n\n        # So, in code:\n\n        unique_counts = set(counts)\n        total = sum(unique_counts)\n\n        print(total)\n\n        # Wait, but that's not correct.\n\n        # Wait, no. Because the counts are the frequencies of each type. So, for each type, you can take up to one candy.\n\n        # So, the maximum possible is the sum of all the counts, but each count is taken at most once.\n\n        # So, the maximum sum is the sum of all counts, but each count is considered once, regardless of how many times it appears.\n\n        # So, the code is correct.\n\n        # But wait, in the first example, when counts are [3,3,3], the sum is 3, which is correct.\n\n        # So, the code seems correct.\n\n        # But wait, let's think of another example.\n\n        # Suppose counts are [5,5,4,4,3,3,2,2,1,1].\n\n        # The unique counts are 5,4,3,2,1. Sum is 5+4+3+2+1=15.\n\n        # So, the maximum sum is 15.\n\n        # But wait, what if the counts are [2,2,2,2,2], then the sum is 2, which is correct.\n\n        # So, the approach is to take all unique counts, sum them.\n\n        # So, the code is correct.\n\n        # So, the code would be:\n\n        # sum(set(counts))\n\n        # So, in the code, after collecting the counts, create a set and sum.\n\n        # So, that's the solution.\n\n        # Now, let's test the code.\n\n        # Example 1:\n\n        # Input:\n        # 1\n        # 3\n        # 1 1 1\n\n        # Output: 3.\n\n        # Because the counts are [3], sum is 3.\n\n        # Example 2:\n\n        # Input:\n        # 1\n        # 5\n        # 1 2 3 4 5\n\n        # Output: 1+2+3+4+5=15.\n\n        # Which is correct.\n\n        # Example 3:\n\n        # Input:\n        # 1\n        # 4\n        # 2 2 2 2\n\n        # Output: 2.\n\n        # Correct.\n\n        # Example 4:\n\n        # Input:\n        # 2\n        # 3\n        # 1 1 2\n        # 4\n        # 1 1 1 2 3\n\n        # Output for first case: 1+2=3.\n\n        # Second case: counts are [3,2,1], sum is 6.\n\n        # So, code seems to work.\n\n        # So, the code is correct.\n    return\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "3\n6\n6\n11",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "3\n13\n11\n1\n15",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n3\n3\n1\n3",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "3\n6\n3\n6",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n14\n8\n4\n4\n14\n10",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "3\n11\n10\n3\n3",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "6\n3\n3\n6\n4",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "3\n15\n7\n2\n10\n14",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "1\n6\n4\n1\n6",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "5\n6\n5\n8",
                "error": null
            }
        ]
    },
    {
        "code_index": 6,
        "code": "def main():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    q = int(input[ptr])\n    ptr += 1\n    for _ in range(q):\n        n = int(input[ptr])\n        ptr +=1\n        a = list(map(int, input[ptr:ptr+n]))\n        ptr +=n\n        from collections import defaultdict\n        count = defaultdict(int)\n        for num in a:\n            count[num] +=1\n        max_size = 0\n        # We need to select a subset of the candies such that for each type, the number of candies taken is <= its count in the box, and all counts are distinct.\n        # So, the maximum possible is the sum of the first m integers, where m is as large as possible, but for each i from 1 to m, the number of candies of type i is at least 1, and the sum of the counts is >= m(m+1)/2.\n        # Let's think about it as trying to find the largest m such that the sum of the first m integers is <= total possible.\n        # Also, the sum of the counts of the m types is >= m(m+1)/2.\n        # So, the approach is to sort the counts in non-decreasing order and try to find the maximum m where the sum of the first m counts is >= m(m+1)/2.\n        # So, steps:\n        # 1. Sort the counts in non-decreasing order.\n        # 2. Compute the prefix sums.\n        # 3. For each possible m, check if the prefix sum up to m is >= m(m+1)/2.\n        # The maximum such m is the answer.\n        # So, let's proceed.\n        counts = sorted(count.values())\n        m = 0\n        current_sum = 0\n        target = 0\n        for i in range(len(counts)):\n            current_sum += counts[i]\n            target = m*(m+1)//2 +1\n            if current_sum >= target:\n                m +=1\n            else:\n                break\n        print(m)\n        # Wait, no, this approach is wrong. Because the counts are sorted, and we need to select the first m counts to see if their sum is >= m(m+1)/2. But wait, no, because the counts are sorted, but perhaps the first m counts have sum >= m(m+1)/2, but maybe a larger m exists by selecting other counts.\n\n        # Wait, no. Because the counts are sorted in non-decreasing order, the sum of the first m is the smallest possible sum for any m elements. So, if the sum of the first m is >= m(m+1)/2, then it's possible to select m elements, but perhaps a larger m is possible by selecting more.\n\n        # So, the correct approach is to sort the counts in non-decreasing order, compute the prefix sums, and for each possible m, check if the prefix sum up to m is >= m(m+1)/2.\n\n        # So, let's try to find the maximum m where the sum of the first m counts is >= m(m+1)/2.\n\n        # So, let's compute the prefix sums and then for each m, check.\n\n        # So, let's compute the prefix sums, then for each m from 1 to len(counts), check if the prefix sum up to m is >= m(m+1)/2.\n\n        # The maximum such m is the answer.\n\n        # So, let's implement this.\n\n        # Let's think about an example.\n\n        # For example, counts = [1, 1, 2, 3], sorted.\n\n        # prefix sums: 1, 2, 4, 7.\n\n        # For m=3: sum is 4. 3*4/2=6. 4 <6, so no.\n\n        # For m=2: sum is 2. 2*3/2=3. 2<3, no.\n\n        # For m=1: sum is 1. 1>=1, yes.\n\n        # So the maximum m is 1.\n\n        # Another example: counts = [1,2,3,4].\n\n        # prefix sums: 1, 3, 6, 10.\n\n        # m=3: sum=6 >= 3*4/2=6: yes.\n\n        # m=4: sum=10 >=4*5/2=10: yes.\n\n        # So maximum m is 4.\n\n        # So, the approach is correct.\n\n        # So, in code:\n\n        # 1. Sort the counts in non-decreasing order.\n\n        # 2. Compute the prefix sum.\n\n        # 3. For each m from 1 to len(counts), check if the sum up to m is >= m(m+1)/2.\n\n        # The maximum m is the answer.\n\n        # So, let's proceed.\n\n        # Now, let's code this.\n\n        # So, for the code:\n\n        # After getting the counts, sorted.\n\n        # Compute the prefix sums.\n\n        # Then for m in 1 to len(counts), check if the sum up to m is >= m(m+1)/2.\n\n        # So, let's implement this.\n\n        counts = sorted(count.values())\n        prefix = [0]*(len(counts)+1)\n        for i in range(len(counts)):\n            prefix[i+1] = prefix[i] + counts[i]\n        max_m = 0\n        for m in range(1, len(counts)+1):\n            if prefix[m] >= m*(m+1)//2:\n                max_m = m\n            else:\n                break  # because the counts are sorted, so for larger m, it's even worse\n        print(max_m)\n        \nif __name__ == '__main__':\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "2\n1\n2\n1\n5\n2\n4\n1",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "2\n1\n3\n1\n2\n2\n2\n1\n1\n1",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n1\n4\n2\n2\n2\n2\n1\n2\n1",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "2\n1\n2\n1\n2\n1\n4\n2",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n2\n4\n4\n4\n4\n2\n1\n1\n1\n2\n1\n2\n1",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "2\n2\n2\n1\n2\n1\n2\n1\n2\n1",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "2\n1\n3\n1\n2\n1\n3\n1\n2\n1",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "2\n1\n3\n3\n3\n3\n2\n2\n3\n3\n2\n2",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "2\n1\n2\n1\n2\n1\n2\n1\n4\n4",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "3\n3\n2\n1\n4\n4\n5\n1",
                "error": null
            }
        ]
    },
    {
        "code_index": 7,
        "code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    q = int(data[idx])\n    idx += 1\n    for _ in range(q):\n        n = int(data[idx])\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        # Compute the number of unique elements\n        unique = len(set(a))\n        print(unique)\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "4\n10\n5\n6",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "5\n3\n2\n7\n1",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n4\n2\n2\n4",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "5\n8\n5\n7",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n4\n4\n4\n1\n2\n2",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "2\n7\n8\n12\n6",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "7\n7\n5\n7\n7",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "4\n3\n3\n2\n3\n2",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "4\n11\n5\n7\n4",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "3\n8\n4\n6",
                "error": null
            }
        ]
    },
    {
        "code_index": 8,
        "code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    q = int(data[idx])\n    idx += 1\n    for _ in range(q):\n        n = int(data[idx])\n        idx += 1\n        a = data[idx:idx+n]\n        idx += n\n        unique = len(set(a))\n        print(unique)\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "4\n10\n5\n6",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "5\n3\n2\n7\n1",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n4\n2\n2\n4",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "5\n8\n5\n7",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n4\n4\n4\n1\n2\n2",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "2\n7\n8\n12\n6",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "7\n7\n5\n7\n7",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "4\n3\n3\n2\n3\n2",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "4\n11\n5\n7\n4",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "3\n8\n4\n6",
                "error": null
            }
        ]
    },
    {
        "code_index": 9,
        "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        freq = defaultdict(int)\n        for num in a:\n            freq[num] +=1\n        # Now, we have the frequency of each candy type.\n        # We need to select a subset of these frequencies such that each selected frequency is unique, and the sum is maximized.\n        # This is equivalent to finding a subset of the frequencies where each element is unique and as large as possible.\n        # So, the problem reduces to finding the maximum possible sum of a subset of frequencies where each element is unique.\n\n        # The frequencies are the values of the dictionary, which are the counts of each type.\n        # To maximize the sum, we should select the largest possible frequencies, but ensuring that each is unique.\n        # So, we can sort the frequencies in descending order and then select as many as possible without duplicates.\n\n        # Let's sort the frequencies in descending order.\n        freq_list = sorted(freq.values(), reverse=True)\n        # Now, we need to find the maximum number of elements we can take from this list such that no two elements are the same.\n        # We can do this by iterating through the sorted list and selecting each element only once.\n\n        max_sum = 0\n        selected = set()\n        for num in freq_list:\n            if num not in selected:\n                selected.add(num)\n                max_sum += num\n            else:\n                # If this number is already selected, we skip it.\n                pass\n        print(max_sum)\n\nif __name__ == \"__main__\":\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "3\n6\n6\n11",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "3\n13\n11\n1\n15",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "3\n3\n3\n1\n3",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "3\n6\n3\n6",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "2\n14\n8\n4\n4\n14\n10",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "3\n11\n10\n3\n3",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "6\n3\n3\n6\n4",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "3\n15\n7\n2\n10\n14",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "1\n6\n4\n1\n6",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "5\n6\n5\n8",
                "error": null
            }
        ]
    },
    {
        "code_index": 10,
        "code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    q = int(data[idx])\n    idx += 1\n    for _ in range(q):\n        n = int(data[idx])\n        idx += 1\n        a = list(map(int, data[idx:idx + n]))\n        idx += n\n        \n        freq = {}\n        for num in a:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        freq_list = sorted(freq.values(), reverse=True)\n        \n        sum_so_far = 0\n        max_size = 0\n        for f in freq_list:\n            if sum_so_far + f > n:\n                break\n            sum_so_far += f\n            max_size += f\n        \n        print(max_size)\n\nif __name__ == '__main__':\n    main()",
        "test_results": [
            {
                "input": "4\n5\n1 3 4 3 2\n15\n3 15 14 8 10 14 12 12 7 12 11 11 9 6 15\n11\n11 11 8 8 6 11 9 9 10 10 8\n14\n14 11 13 9 14 11 14 8 8 8 14 13 13 6 14",
                "standard_solution_output": "3\n6\n6\n11",
                "model_output": "5\n15\n11\n14",
                "error": null
            },
            {
                "input": "5\n7\n5 7 2 4 5 2 3\n14\n2 3 14 14 14 14 14 14 14 14 14 14 14 14\n11\n4 11 11 11 11 11 11 11 11 11 11\n7\n10 4 1 2 6 5 3\n15\n12 12 12 12 12 12 12 12 12 12 12 12 12 12 12",
                "standard_solution_output": "3\n13\n11\n1\n15",
                "model_output": "7\n14\n11\n7\n15",
                "error": null
            },
            {
                "input": "5\n4\n3 9 3 1\n7\n2 5 1 3 2 5 3\n3\n4 3 3\n2\n5 2\n5\n7 5 5 1 4",
                "standard_solution_output": "3\n3\n3\n1\n3",
                "model_output": "4\n7\n3\n2\n5",
                "error": null
            },
            {
                "input": "4\n7\n5 6 3 7 6 4 5\n13\n9 3 7 2 2 5 9 7 3 4 6 9 8\n6\n4 1 6 3 5 4\n14\n8 2 6 6 8 3 5 4 6 1 5 1 3 2",
                "standard_solution_output": "3\n6\n3\n6",
                "model_output": "7\n13\n6\n14",
                "error": null
            },
            {
                "input": "7\n4\n2 3 2 3\n14\n5 2 3 1 2 2 2 3 3 3 2 2 1 3\n11\n5 2 1 3 3 1 1 1 2 2 3\n7\n4 3 3 1 3\n12\n3 1 2 2 1 2 2 3 1 3 1 3\n15\n4 2 1 2 1 2 2 2 2 1 2 1 1 3 2\n10\n2 2 3 3 2 1 3 1 3 3",
                "standard_solution_output": "3\n14\n10\n4\n9\n14\n10",
                "model_output": "4\n14\n11\n7\n1\n2\n2",
                "error": null
            },
            {
                "input": "5\n3\n2 5 2\n13\n1 12 3 1 2 9 12 12 5 12 11 1 9 12\n19\n14 19 14 12 17 11 6 12 16 19 15 17 18 17 6 5 10 14 14\n14\n4 10 11 12 8 6 14 15 9 7 12 6 18 14\n11\n11 4 9 18 2 5 8 3 14 11 5",
                "standard_solution_output": "3\n11\n10\n3\n3",
                "model_output": "3\n13\n12\n17\n7",
                "error": null
            },
            {
                "input": "5\n11\n3 3 9 5 1 5 8 2 11 8 5\n12\n6 4 9 8 10 12 7 6 12 8 4 10\n7\n10 2 5 2 5 1 6\n15\n3 3 7 9 1 5 1 9 5 7 3 6 5 9 2\n9\n6 8 6 4 3 2 5 1 6",
                "standard_solution_output": "6\n3\n3\n6\n4",
                "model_output": "11\n12\n7\n15\n9",
                "error": null
            },
            {
                "input": "6\n5\n2 1 5 3 3\n15\n1 3 1 3 2 2 3 1 1 1 1 2 3 2 2\n7\n1 1 1 3 2 1 2\n4\n2 2 1 1\n10\n4 2 2 1 1 1 1 1 1 1\n14\n1 1 2 1 1 1 1 1 1 1 1 1 1 1",
                "standard_solution_output": "3\n15\n7\n3\n10\n14",
                "model_output": "5\n15\n7\n4\n10\n14",
                "error": null
            },
            {
                "input": "5\n4\n1 3 2 4\n14\n13 11 13 2 9 10 14 5 12 8 6 1 14 13\n7\n5 3 2 6 1 6 6\n7\n14 5 1 13 12 2 7\n10\n10 10 3 5 3 1 5 1 3 3",
                "standard_solution_output": "1\n6\n4\n1\n7",
                "model_output": "4\n14\n7\n7\n10",
                "error": null
            },
            {
                "input": "4\n7\n2 6 6 5 2 5 2\n14\n3 4 9 6 6 3 8 2 4 1 3 2 4 5\n10\n5 2 2 4 5 2 1 4 1 4\n15\n6 5 8 9 4 8 6 1 8 4 5 6 6 5 4",
                "standard_solution_output": "6\n6\n6\n10",
                "model_output": "7\n14\n10\n15",
                "error": null
            }
        ]
    }
]